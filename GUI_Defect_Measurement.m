function GUI_Defect_Measurement
figure(1), clf
set(gcf,...
    'MenuBar','none',...                %Removing the menubar
    'Position',[200,500,300,310]);      %Making a box at 520 510 of screen
% With width = 300, height = 290
global imdisplay in_image image_threshold accumulator_threshold rmin rmax minimumpeakseperation show_images result

%% Top part
%Top title Input Image
uicontrol('Style','Text',...
    'Position',[-50,280,400,25],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'FontSize', 14,...
    'FontWeight','bold',...
    'String', 'Semiconductor Defect Counter');
%Top title ? explanation
uicontrol('Style','Text',...
    'Position',[-50,260,400,25],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'FontSize', 8,...
    'String', 'Mouseover or click the ? boxes for extra information.');

%% Bottom Part
%Number of defects indicator
uicontrol('Style','Text',...
    'Position',[-130,68,400,25],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'FontSize', 10,...
    'String', 'Number of defects:');
%Number of defects actual counter
result = uicontrol('Style','Text',...
    'Position',[-130,50,400,25],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'FontSize', 14,...
    'FontWeight','bold',...
    'tag', 'countertotal',...
    'String', '0');
%My own name
uicontrol('Style','Text',...
    'Position',[0,0,400,25],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'FontSize', 9,...
    'tag', 'countertotal',...
    'String', 'Created by Quirijn Lukas Vermeire');
%Execute defect counting button
uicontrol('Style','Pushbutton',...
    'String','Count defects!',...
    'FontSize', 14,...
    'Position',[145,40,150,55],...
    'CallBack', @countDefects,...
    'TooltipString', 'Please input the name of the image that needs to be analysed. No brackets are required.');
%Reset values to default
% Q6 Minimum Peak
uicontrol('Style','Pushbutton',...
    'String','Default values',...
    'Position',[0,0,80,20],...
    'TooltipString', 'Resets values to default.',...
    'CallBack', @resetVals);
    function resetVals(h,evendata)
        set(imdisplay,'String','CL_3.mat');
        set(image_threshold,'String','0');
        set(accumulator_threshold,'String','0.75');
        set(rmin,'String','5');
        set(rmax,'String','8');
        set(minimumpeakseperation,'String','5');
    end
%% ---------- Input Lines Start Here ------------
%% Input Image
% Q1 Input Image
uicontrol('Style','Pushbutton',...
    'String','?',...
    'Position',[280,240,18,18],...
    'TooltipString', 'Please input the name of the image that needs to be analysed. No brackets are required.',...
    'CallBack', @helpdlg1);
%On click, the help figure appears with this function.
    function helpdlg1(h, evendata)
        helpfig = helpdlg('When the button "Click to select image" is clicked, a menu will open allowing you to browse for your required .mat file. Because of compatibality, only .mat files can be opened.');
    end
%Input1 Input Image
in_image = uicontrol('Style','Pushbutton',...
    'String','Click to select image',...
    'Position',[150,240,105,18],...
    'Tag', 'in_image',...
    'CallBack',@getFile); %uigetfile

%Expl1 Input Image
uicontrol('Style','Text',...
    'Position',[20,240,120,18],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String', 'Image to be loaded:');
%% Input Image Display
%Input1.2 Input Image Display
imdisplay = uicontrol('Style','Text',...
    'String','Click to select image',...
    'Position',[150,220,105,18],...
    'Tag', 'in_image',...
    'String', 'CL_3.mat',... % the default is CL_3
    'BackgroundColor',[0.8 0.8 0.8]);

%Expl1.2 Input Image Display
uicontrol('Style','Text',...
    'Position',[20,220,120,18],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String', 'Selected image:');



%% Image Threshold
% Q2 Image Threshold
uicontrol('Style','Pushbutton',...
    'String','?',...
    'Position',[280,200,18,18],...
    'TooltipString', 'If the original image needs tresholding before edge detection, then specify treshold value between 0-1. If value equals 0, then no thresholding is performed.',...
    'CallBack', @helpdlg2);
%On click, the help figure appears with this function.
    function helpdlg2(h,evendata)
        helpfig = helpdlg('If the original image needs tresholding before edge detection, then specify treshold value between 0-1. If value equals 0, then no thresholding is performed.');
    end
%Input2 Image Threshold
image_threshold = uicontrol('Style','edit',...
    'String','0',...
    'Position',[150,200,105,18],...
    'Tag', 'image_threshold');
%Expl2 Image Threshold
uicontrol('Style','Text',...
    'Position',[20,200,120,18],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String', 'Image Threshold:');

%% Accumulator Threshold
% Q3 Accumulator Threshold
uicontrol('Style','Pushbutton',...
    'String','?',...
    'Position',[280,180,18,18],...
    'TooltipString', 'Minimum size of peak to find in accumulator: range 0-1. A lower value will reduce the speed of the code, a higher value will miss peaks.',...
    'CallBack', @helpdlg3);
%On click, the help figure appears with this function.
    function helpdlg3(h,evendata)
        helpfig = helpdlg('This value will be the minimum size of the peak that will be found in the accumulator, the range is 0 to 1. A lower value will reduce the speed of the code, but a higher value will miss peaks.');
    end
%Input3 Accumulator Threshold
accumulator_threshold = uicontrol('Style','edit',...
    'String','0.75',...
    'Position',[150,180,105,18],...
    'Tag', 'accumulator_threshold');
%Expl3 Accumulator Threshold
uicontrol('Style','Text',...
    'Position',[20,180,120,18],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String', 'Accumulator Threshold:');

%% Min size of circles
% Q4 Min size of circles
uicontrol('Style','Pushbutton',...
    'String','?',...
    'Position',[280,160,18,18],...
    'TooltipString', 'Miniumum size of circle to be found (in pixels).',...
    'CallBack', @helpdlg4);
%On click, the help figure appears with this function.
    function helpdlg4(h,evendata)
        helpfig = helpdlg('The minimum size of the circles that are to be found are input here (in pixels).');
    end
%Input4 Min size of circles
rmin = uicontrol('Style','edit',...
    'String','5',...
    'Position',[150,160,105,18],...
    'Tag', 'tmin');
%Expl4 Min size of circles
uicontrol('Style','Text',...
    'Position',[20,160,120,18],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String', 'Min. size of circles (px):');

%% Max size of circles
% Q5 Max size of circles
uicontrol('Style','Pushbutton',...
    'String','?',...
    'Position',[280,140,18,18],...
    'TooltipString', 'Maximum size of circle to be found (in pixels).',...
    'CallBack', @helpdlg5);
%On click, the help figure appears with this function.
    function helpdlg5(h,evendata)
        helpfig = helpdlg('The maximum size of the circles that are to be found are input here (in pixels).');
    end
%Input5 Max size of circles
rmax = uicontrol('Style','edit',...
    'String','8',...
    'Position',[150,140,105,18],...
    'Tag', 'tmax');
%Expl5 Max size of circles
uicontrol('Style','Text',...
    'Position',[20,140,120,18],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String', 'Max. size of circles (px):');

%% Minimum Peak
% Q6 Minimum Peak
uicontrol('Style','Pushbutton',...
    'String','?',...
    'Position',[280,120,18,18],...
    'TooltipString', 'Miniumum allowable distance between defects.',...
    'CallBack', @helpdlg6);
%On click, the help figure appears with this function.
    function helpdlg6(h,evendata)
        helpfig = helpdlg('Between defects there is a minimum allowable distance, this is set here.');
    end
%Input6 Minimum Peak
minimumpeakseperation = uicontrol('Style','edit',...
    'String','5',...
    'Position',[150,120,105,18],...
    'Tag', 'minimumpeakseperation');
%Expl6 Minimum Peak
uicontrol('Style','Text',...
    'Position',[20,120,120,18],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String', 'Minimum Peak:');

%% Show Images
% Q7 Show Images
uicontrol('Style','Pushbutton',...
    'String','?',...
    'Position',[280,100,18,18],...
    'TooltipString', 'If checked, it will display images in a figure window. If left unchecked, it wont.',...
    'CallBack', @helpdlg7);
%On click, the help figure appears with this function.
    function helpdlg7(h,evendata)
        helpfig = helpdlg('If this box is checked, it will display the images in a seperate figure window. If left unchecked, it will count the defects but not display them on a figure.');
    end
%Input7 Show Images
show_images = uicontrol('Style','checkbox',...
    'String','Show Images',...
    'Position',[150,100,105,18],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'Value', 1,...
    'Tag', 'show_images');
%Expl7 Show Images
uicontrol('Style','Text',...
    'Position',[20,100,120,18],...
    'BackgroundColor',[0.8 0.8 0.8],...
    'String', 'Show Images: ');

return
end
%% Button Functions start here

function countDefects(h,eventdata)
%countDefects is the function that is run when the "Count Defects!" button
%is pressed, it reads in all global values, then puts these into the Defect
%Measurement function, with a lot of error checking along the way.
%% Loading in values
% Global values
global imdisplay image_threshold accumulator_threshold rmin rmax minimumpeakseperation show_images result
% Taking the required values from the global variables
t_in_image = get(imdisplay,'String');
t_image_threshold = str2double(get(image_threshold,'String'));
t_accumulator_threshold = str2double(get(accumulator_threshold,'String'));
t_rmin = str2double(get(rmin,'String'));
t_rmax = str2double(get(rmax,'String'));
t_minimumpeakseperation = str2double(get(minimumpeakseperation,'String'));
t_show_images = get(show_images,'value'); % Rather tha the string, the value of the input is taken in this case
%% Putting the values into the defect counting function
if strcmp(t_in_image,'0') == 1                      % If an error occured when loading in an image
    errfig = errordlg('Please select an image!','No image selected','on'); %#ok<NASGU>
    return
else
    % A try catch starts here, to prevent corrupt or incorrect images from
    % being read in.
    try
        t2_in_image = load(t_in_image);             %Loading in the image, t2_in_image is a struct
        t_in_image = fieldnames(t2_in_image);       %Grasping the fieldnames of t2_in_image, to make the struct clear
        t2_in_image = t2_in_image.(t_in_image{1});  %Taking the first variable in the struct, which will be the image array
        t_in_image = t2_in_image;                   %Making the output t_in_image for future clearance
    catch
        %If something went wrong, this is displayed
        errfig = errordlg('Your image is corrupt, or not an image.','Error','on'); %#ok<NASGU>
        return
    end
end

%% If any of the input is not a number, display error
if isnan(t_image_threshold) || isnan(t_accumulator_threshold) || isnan(t_rmin) || isnan(t_rmax) || isnan(t_minimumpeakseperation)
    %isnan checks if NaN (not a number) is found, which means anything
    %that's a string or if no input is found at all.
    %Simple error display if one of them isn't a number (or multiple
    %aren't)
    errfig = errordlg('Not all variables are numbers, or some are missing.','Not a Number','on'); %#ok<NASGU>
    return
end
if t_image_threshold > 1 || t_image_threshold < 0 || t_accumulator_threshold > 1 || t_accumulator_threshold < 0
    errfig = errordlg('An incorrect value was input.','Incorrect value','on'); %#ok<NASGU>
    return
end
%% Checking for show_images
if show_images      %Checks if show_images is positive or negative
    figure;         % Creates new window so Defect Measurement can plot the figures
end
%% Defect Measurement
try
    [N,I,J,E] = Defect_Measurement(t_in_image,t_image_threshold,t_accumulator_threshold,t_rmin,t_rmax,t_minimumpeakseperation,t_show_images);
catch
    %Just in case something goes wrong, it will be caught and will notify the user.
    errfig = errordlg('An unexpected error occured.','Unexpected error','on'); %#ok<NASGU>
    return
end
%% Setting the result in the UI
set(result,'String',N);
drawnow; % Forces GUI to update all pending writing requests, preventing further input being required
% End of function
return
end
%% Acquiring filename
function getFile(h,eventdata)
%getFile is the function that is executed when the user attempts to access
%a file to load into, then it is put onto the GUI to display.
global imdisplay                                                    %loading in the variable imdisplay (the display of selected image)
try
    t_in = uigetfile('*.mat','Select the image you wish to load in.');  %Making t_in what is loaded with the uigetfile method
    if t_in == 0
        %When the person selected nothing, it will simply return and do no changes.
        return
    else
        %If something is selected, it will be set to the imdisplay.
        set(imdisplay,'String',t_in);                                       %Displaying the loaded in image on the UI
    end
    drawnow; % Forces GUI to update all pending writing requests, preventing further input being required
catch
    %Just in case something goes wrong, it will be caught and will notify the user.
    errfig = errordlg('An unexpected error occured.','Unexpected error','on'); %#ok<NASGU>
    return
end
%End of function
return
end